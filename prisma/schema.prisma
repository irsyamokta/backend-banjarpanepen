generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id                String    @id @default(uuid())
  name              String
  email             String    @unique
  phone             String?
  instagram         String?
  password          String
  role              Role      @default(USER)
  isVerified        Boolean   @default(false)
  verificationToken String?
  resetToken        String?
  resetExpires      DateTime?
  publicId          String?
  imageUrl          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  articlesEdited Article[] @relation("EditedBy")
  sessions       Session[]
}

model Article {
  id        String   @id @default(uuid())
  title     String
  content   String   
  writer    String
  publicId  String?
  thumbnail String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  editor   User?   @relation("EditedBy", fields: [editorId], references: [id])
  editorId String?
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String   @db.Text
  date        DateTime
  time        String
  place       String
  price       Int?
  publicId    String?
  thumbnail   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Gallery {
  id        String   @id @default(uuid())
  title     String
  caption   String?
  publicId  String?
  image     String
  createdAt DateTime @default(now())
}

model Tour {
  id          String   @id @default(uuid())
  title       String
  about       String   
  location    String?
  operational String
  start       String?
  end         String?
  facility    String
  maps        String?  
  price       Int
  publicId    String?
  thumbnail   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TourPackage {
  id        String   @id @default(uuid())
  title     String
  price     Int?
  benefit   String
  publicId  String?
  thumbnail String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SelectOption {
  id        String   @id @default(uuid())
  name      String
  category  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id           String   @id @default(uuid())
  refreshToken String   
  userAgent    String?
  ipAddress    String?
  isValid      Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String
}
